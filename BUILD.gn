declare_args() {
  # config_file
  mds_config_file = ""

  # log
  mds_log_enable = true
  mds_log_build_level = "MDS_LOG_LEVEL_INF"
  mds_log_filter_enable = false
  mds_assert_enable = false

  # lib
  mds_library_miniable = false

  # tick
  mds_tick_u64 = false

  # clock
  mds_clock_tick_freq_hz = 1000

  # core
  mds_core_architecture = ""
  mds_core_backtrace_depth = 16

  # object
  mds_object_name_size = 7

  # kernel
  mds_kernel_log_level = "MDS_LOG_LEVEL_WRN"
  mds_kernel_smp_cpus = 1
  mds_kernel_thread_priority_max = 32
  mds_kernel_hook_enable = false
  mds_kernel_stats_enable = false

  # timer
  mds_timer_skiplist_level = 1
  mds_timer_skiplist_shift = 2
  mds_timer_independent = true
  mds_timer_thread_priority = 0
  mds_timer_thread_stacksize = 256
  mds_timer_thread_ticks = 16

  # idle
  mds_idle_thread_stacksize = 384
  mds_idle_thread_ticks = 16
  mds_idle_thread_hooks = 0
}

config("mds_kernel_config") {
  include_dirs = [ "include/" ]
  defines = []

  if (defined(mds_config_file) && mds_config_file != "") {
    defines += [ "CONFIG_MDS_CONFIG_FILE=\"${mds_config_file}\"" ]
  }

  # log
  if (defined(mds_log_enable) && mds_log_enable) {
    defines += [ "CONFIG_MDS_LOG_ENABLE=1" ]
  } else {
    defines += [ "CONFIG_MDS_LOG_ENABLE=0" ]
  }

  assert(mds_log_build_level == "MDS_LOG_LEVEL_OFF" ||
         mds_log_build_level == "MDS_LOG_LEVEL_FAT" ||
         mds_log_build_level == "MDS_LOG_LEVEL_ERR" ||
         mds_log_build_level == "MDS_LOG_LEVEL_WRN" ||
         mds_log_build_level == "MDS_LOG_LEVEL_INF" ||
         mds_log_build_level == "MDS_LOG_LEVEL_DBG")
  defines += [ "CONFIG_MDS_LOG_BUILD_LEVEL=${mds_log_build_level}" ]

  if (defined(mds_log_filter_enable) && mds_log_filter_enable) {
    defines += [ "CONFIG_MDS_LOG_FILTER_ENABLE=1" ]
  } else {
    defines += [ "CONFIG_MDS_LOG_FILTER_ENABLE=0" ]
  }

  if (defined(mds_assert_enable) && mds_assert_enable) {
    defines += [ "CONFIG_MDS_ASSERT_ENABLE=1" ]
  } else {
    defines += [ "CONFIG_MDS_ASSERT_ENABLE=0" ]
  }

  # tick
  if (defined(mds_tick_u64) && mds_tick_u64) {
    defines += [ "CONFIG_MDS_TICK_U64=1" ]
  } else {
    defines += [ "CONFIG_MDS_TICK_U64=0" ]
  }

  # clock
  if (defined(mds_clock_tick_freq_hz)) {
    assert(mds_clock_tick_freq_hz > 0)
    defines += [ "CONFIG_MDS_CLOCK_TICK_FREQ_HZ=${mds_clock_tick_freq_hz}" ]
  }

  # core
  if (defined(mds_core_backtrace_depth)) {
    defines += [ "CONFIG_MDS_CORE_BACKTRACE_DEPTH=${mds_core_backtrace_depth}" ]
  }

  # object
  defines += [ "CONFIG_MDS_OBJECT_NAME_SIZE=${mds_object_name_size}" ]

  # kernel
  assert(mds_kernel_log_level == "MDS_LOG_LEVEL_OFF" ||
         mds_kernel_log_level == "MDS_LOG_LEVEL_FAT" ||
         mds_kernel_log_level == "MDS_LOG_LEVEL_ERR" ||
         mds_kernel_log_level == "MDS_LOG_LEVEL_WRN" ||
         mds_kernel_log_level == "MDS_LOG_LEVEL_INF" ||
         mds_kernel_log_level == "MDS_LOG_LEVEL_DBG")
  defines += [ "CONFIG_MDS_KERNEL_LOG_LEVEL=${mds_kernel_log_level}" ]

  if (defined(mds_kernel_smp_cpus)) {
    assert(mds_kernel_smp_cpus > 0)
    defines += [ "CONFIG_MDS_KERNEL_SMP_CPUS=${mds_kernel_smp_cpus}" ]
  }

  if (defined(mds_kernel_thread_priority_max)) {
    defines += [
      "CONFIG_MDS_KERNEL_THREAD_PRIORITY_MAX=${mds_kernel_thread_priority_max}",
    ]
  }

  if (defined(mds_kernel_hook_enable) && mds_kernel_hook_enable) {
    defines += [ "CONFIG_MDS_KERNEL_HOOK_ENABLE=1" ]
  }

  if (defined(mds_kernel_stats_enable) && mds_kernel_stats_enable) {
    defines += [ "CONFIG_MDS_KERNEL_STATS_ENABLE=1" ]
  }

  if (defined(mds_timer_skiplist_level)) {
    defines += [ "CONFIG_MDS_TIMER_SKIPLIST_LEVEL=${mds_timer_skiplist_level}" ]
  }

  if (defined(mds_timer_skiplist_shift)) {
    defines += [ "CONFIG_MDS_TIMER_SKIPLIST_SHIFT=${mds_timer_skiplist_shift}" ]
  }
}

static_library("mds_kernel") {
  defines = []

  sources = [
    "src/device.c",
    "src/log.c",
    "src/object.c",
  ]

  # lib
  sources += [
    "src/lib/format.c",
    "src/lib/membuff.c",
    "src/lib/msglist.c",
    "src/lib/skiplist.c",
    "src/lib/string.c",
    "src/lib/time.c",
    "src/lib/tree.c",
  ]
  if (defined(mds_library_miniable) && mds_library_miniable) {
    defines += [ "CONFIG_MDS_LIBRARY_MINIABLE=1" ]
  } else {
    defines += [ "CONFIG_MDS_LIBRARY_MINIABLE=0" ]
  }

  # core
  if (defined(mds_core_architecture) && mds_core_architecture != "") {
    sources += [ "src/core/" + mds_core_architecture + ".c" ]
  } else {
    assert("mds_core_architecture is not defined")
  }

  # sys
  if (defined(mds_timer_independent) && mds_timer_independent) {
    defines += [ "CONFIG_MDS_TIMER_INDEPENDENT=1" ]
  } else {
    defines += [ "CONFIG_MDS_TIMER_INDEPENDENT=0" ]
  }

  if (mds_kernel_thread_priority_max == 0) {
    sources += [ "src/nosys.c" ]
  } else {
    sources += [
      "src/sys/clock.c",
      "src/sys/idle.c",
      "src/sys/kernel.c",
      "src/sys/scheduler.c",
      "src/sys/spinlock.c",
      "src/sys/thread.c",
      "src/sys/timer.c",
      "src/sys/workq.c",
    ]

    sources += [
      "src/sys/ipc/condition.c",
      "src/sys/ipc/event.c",
      "src/sys/ipc/mempool.c",
      "src/sys/ipc/msgqueue.c",
      "src/sys/ipc/mutex.c",
      "src/sys/ipc/rwlock.c",
      "src/sys/ipc/semaphore.c",
    ]

    include_dirs = [ "src/sys" ]

    if (defined(mds_timer_thread_priority)) {
      assert(mds_timer_thread_priority < mds_kernel_thread_priority_max)
      defines +=
          [ "CONFIG_MDS_TIMER_THREAD_PRIORITY=${mds_timer_thread_priority}" ]
    }

    if (defined(mds_timer_thread_stacksize)) {
      assert(mds_timer_thread_stacksize > 0)
      defines +=
          [ "CONFIG_MDS_TIMER_THREAD_STACKSIZE=${mds_timer_thread_stacksize}" ]
    }

    if (defined(mds_timer_thread_ticks)) {
      assert(mds_timer_thread_ticks > 0)
      defines += [ "CONFIG_MDS_TIMER_THREAD_TICKS=${mds_timer_thread_ticks}" ]
    }

    if (defined(mds_idle_thread_stacksize)) {
      assert(mds_idle_thread_stacksize > 0)
      defines +=
          [ "CONFIG_MDS_IDLE_THREAD_STACKSIZE=${mds_idle_thread_stacksize}" ]
    }
    if (defined(mds_idle_thread_ticks)) {
      assert(mds_idle_thread_ticks > 0)
      defines += [ "CONFIG_MDS_IDLE_THREAD_TICKS=${mds_idle_thread_ticks}" ]
    }
    if (defined(mds_idle_thread_hooks)) {
      defines += [ "CONFIG_MDS_IDLE_THREAD_HOOKS=${mds_idle_thread_hooks}" ]
    }
  }

  # mem
  sources += [
    "src/mem/llff.c",
    "src/mem/memory.c",
  ]

  # config
  public_configs = [ ":mds_kernel_config" ]
}
